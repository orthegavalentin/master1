#lang racket

(define encoding-length 16)
(define max-size (expt 2 encoding-length))

(define (compress in out)
    (let f ((dico (init-dico)) (result '()) (w '()) (index 256))
      (let ((x (read-byte in)))
        (if (eof-object? x)
            (begin 
              (write-result result out)
              (close-output-port out))
            (let ((temp (pair w x)))
              (if (hash-has-key? dico temp)
                  (f dico result temp index)
                  (begin
                    (hash-set! dico temp index)
                    (let ([result (write-result
                                   (append result
                                           (binary-with-encoding-length
                                            (to-binary (hash-ref dico w)))) out)]
                          [w (list x)])    
                      (if (eq? index max-size)
                          (f (init-dico) result w 256)
                          (f dico result w (+ 1 index)))))))))))

(define (write-result l out)
  (if (> 8 (length l))
      l
      (let ((n (to-integer (take l 8))))
        (write-bytes (bytes n) out)
        (write-result (drop l 8) out))))


(define (to-binary n)
  (let div ([n n])
    (let ([n n] [rest (modulo n 2)])
      (if (equal? (- n rest) 0)
          (list rest)
          (append (div (/ (- n rest) 2)) (list rest))))))

(define (to-integer l)
    (let f ((n 0) (l l) (result 0))
      (if (empty? l)
          result
          (f (+ 1 n) (cdr l) (+ result (* (car l) (expt 2 n)))))))

(define (binary-with-encoding-length l)
  (append (make-list (- encoding-length (length l)) 0) l))

(define (pair x y)
  (append x (list y)))

(define (init-dico)
  (let ([dico (make-hash)])
    (for ([i (in-range 256)])
    (hash-set! dico (list i) i))
    dico))

(compress (open-input-file "/home/noe/Téléchargements/test.txt") (open-output-file "/home/noe/Téléchargements/out.bin" #:mode 'binary #:exists 'replace))